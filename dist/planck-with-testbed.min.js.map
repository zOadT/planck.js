{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/serializer/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_ASSERT","Vec2","common","Math","x","y","this","assert","_serialize","_deserialize","data","obj","zero","neo","clone","v","toString","JSON","stringify","isValid","isFinite","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","EPSILON","invLength","sqrt","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","max","lower","min","clamp","lengthSqr","invSqrt","scaleFn","translateFn","native","math","isNaN","nextPowerOfTwo","isPowerOfTwo","mod","num","random","debug","statement","err","log","Rot","angle","setAngle","setIdentity","rot","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Vec3","z","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","TYPES","context","restore","clazz","type","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Position","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Shape","m_radius","_reset","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","body","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","active","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","mass","center","I","fixtures","forEach","fixture","_addFixture","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","setActive","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","shouldCollide","jn","m_newFixture","createFixture","fixdef","destroyFixture","found","node","edge","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","PolygonShape","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","i1","i2","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","pLocal","numerator","denominator","minX","minY","maxX","maxY","D","ex1","ey1","ex2","ey2","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","radius","rr","sigma","EdgeShape","v1","v2","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","vertex1","vertex2","vertex0","vertex3","hasVertex0","hasVertex3","setPrev","setNext","v3","v0","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","height","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","newline","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","m_isLoop","_createLoop","_createChain","isLoop","prevVertex","nextVertex","hasPrevVertex","hasNextVertex","map","_setPrevVertex","_setNextVertex","createChain","getChildEdge","_textures","render","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","indexOf","splice","timeout","time","setTimeout","timer","clearTimeout","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","bodies","joints","getBodyList","reverse","_addBody","createJoint","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","createProxy","insertLeaf","destroyProxy","removeLeaf","moveProxy","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","Iterator","iterator","close","parents","states","root","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","xf1","xf2","aabb1","aabb2","displacement","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","undefined","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Serializer","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","SID","CLASSES","toJson","flat","queue","store","cls","__sid","ref","refIndex","refType","str","join","fromJson","parse","dump","ctx","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","backup","solveIslandTOI","subStep","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","gamma","bias","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","y1","x2","y2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","inversed","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","save","lineCap","drawing","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","self","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":"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","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 63);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.prototype._serialize = function() {\n  return {\n    x: this.x,\n    y: this.y\n  };\n};\n\nVec2._deserialize = function(data) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = data.x;\n  obj.y = data.y;\n  return obj;\n};\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.x) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.prototype._serialize = function() {\n  return {\n    x: this.x,\n    y: this.y,\n    z: this.z\n  };\n};\n\nVec3._deserialize = function(data) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = data.x;\n  obj.y = data.y;\n  obj.z = data.z;\n  return obj;\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\nJoint.TYPES = {};\n\nJoint._deserialize = function(data, context, restore) {\n  var clazz = Joint.TYPES[data.type];\n  return clazz && restore(clazz, data);\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.prototype._reset = function() {\n};\n\nShape.prototype._serialize = function() {\n  return {};\n};\n\nShape.TYPES = {};\n\nShape._deserialize = function(data, context, restore) {\n  var clazz = Shape.TYPES[data.type];\n  return clazz && restore(clazz, data);\n};\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  } else if (typeof lower === 'object') {\n    this.upperBound.set(lower);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  b = b || this;\n\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n  return this;\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    var cA = pointA.clone().addMul(radiusA, normal);\n    var cB = pointB.clone().addMul(-radiusB, normal);\n    points[0] = Vec2.mid(cA, cB);\n    separations[0] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop angularVelocity\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {World} world\n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype._serialize = function() {\n  var fixtures = [];\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    fixtures.push(f);\n  }\n  return {\n    type: this.m_type,\n    position: this.m_xf.p,\n    angle: this.m_xf.q.getAngle(),\n    linearVelocity: this.m_linearVelocity,\n    angularVelocity: this.m_angularVelocity,\n    fixtures: fixtures,\n  };\n};\n\nBody._deserialize = function(data, world, restore) {\n  var body = new Body(world, data);\n\n  data.fixtures.forEach(function(data) {\n    var fixture = restore(Fixture, data, body);\n    body._addFixture(fixture);\n  });\n\n  return body;\n};\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nBody.prototype._addFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. This will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n  this._addFixture(fixture);\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\nShape.TYPES[PolygonShape.TYPE] = PolygonShape;\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertices: this.m_vertices,\n  };\n};\n\nPolygonShape._deserialize = function(data) {\n  var shape = new PolygonShape(data.vertices);\n  return shape;\n};\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\nPolygonShape.prototype._reset = function() {\n  this._set(this.m_vertices)\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n *\n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  // Copy vertices.\n  for (var i = 0; i < m; ++i) {\n    this.m_vertices[i] = ps[hull[i]];\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    // Transform vertices and normals.\n    for (var i = 0; i < this.m_count; ++i) {\n      this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n    }\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  // Put the ray into the polygon's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var lower = 0.0;\n  var upper = input.maxFraction;\n\n  var index = -1;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    var numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n    var denominator = Vec2.dot(this.m_normals[i], d);\n\n    if (denominator == 0.0) {\n      if (numerator < 0.0) {\n        return false;\n      }\n    } else {\n      // Note: we want this predicate without division:\n      // lower < numerator / denominator, where denominator < 0\n      // Since denominator < 0, we have to flip the inequality:\n      // lower < numerator / denominator <==> denominator * lower > numerator.\n      if (denominator < 0.0 && numerator < lower * denominator) {\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = numerator / denominator;\n        index = i;\n      } else if (denominator > 0.0 && numerator < upper * denominator) {\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = numerator / denominator;\n      }\n    }\n\n    // The use of epsilon here causes the assert on lower to trip\n    // in some cases. Apparently the use of epsilon was to make edge\n    // shapes work, but now those are handled separately.\n    // if (upper < lower - Math.EPSILON)\n    if (upper < lower) {\n      return false;\n    }\n  }\n\n  _ASSERT && common.assert(0.0 <= lower && lower <= input.maxFraction);\n\n  if (index >= 0) {\n    output.fraction = lower;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\nShape.TYPES[CircleShape.TYPE] = CircleShape;\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    p: this.m_p,\n    radius: this.m_radius,\n  };\n};\n\nCircleShape._deserialize = function(data) {\n  return new CircleShape(data.p, data.radius);\n};\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\nShape.TYPES[EdgeShape.TYPE] = EdgeShape;\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertex1: this.m_vertex1,\n    vertex2: this.m_vertex2,\n\n    vertex0: this.m_vertex0,\n    vertex3: this.m_vertex3,\n    hasVertex0: this.m_hasVertex0,\n    hasVertex3: this.m_hasVertex3,\n  };\n};\n\nEdgeShape._deserialize = function(data) {\n  var shape = new EdgeShape(data.vertex1, data.vertex2);\n  if (shape.hasVertex0) {\n    shape.setPrev(data.vertex0);\n  }\n  if (shape.hasVertex3) {\n    shape.setNext(data.vertex3);\n  }\n  return shape;\n};\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\nShape.TYPES[ChainShape.TYPE] = ChainShape;\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  this.m_isLoop = loop;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\nChainShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertices: this.m_vertices,\n    isLoop: this.m_isLoop,\n    prevVertex: this.m_prevVertex,\n    nextVertex: this.m_nextVertex,\n    hasPrevVertex: this.m_hasPrevVertex,\n    hasNextVertex: this.m_hasNextVertex,\n  };\n};\n\nChainShape._deserialize = function(data) {\n  var shape = new ChainShape(data.vertices.map(Vec2._deserialize), data.isLoop);\n  return shape;\n};\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Joint = require('./Joint');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\nWorld.prototype._serialize = function() {\n  var bodies = [];\n  var joints = [];\n\n  for (var b = this.getBodyList(); b; b = b.getNext()) {\n    bodies.push(b);\n  }\n\n  for (var j = this.getJointList(); j; j = j.getNext()) {\n    if (typeof j._serialize === 'function') {\n      joints.push(j);\n    }\n  }\n\n  return {\n    gravity: this.m_gravity,\n    bodies: bodies,\n    joints: joints,\n  };\n};\n\nWorld._deserialize = function(data, context, restore) {\n  if (!data) {\n    return new World();\n  }\n\n  var world = new World(data.gravity);\n\n  data.bodies && data.bodies.reverse().forEach(function(data) {\n    world._addBody(restore(Body, data, world));\n  });\n\n  data.joints && data.joints.reverse().forEach(function(data) {\n    world.createJoint(restore(Joint, data, world));\n  });\n\n  return world;\n};\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} body\n */\nWorld.prototype._addBody = function(body) {\n  _ASSERT && common.assert(this.isLocked() === false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  this._addBody(body);\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext()\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\nvar Shape = require('./Shape');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Body} body\n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Re-setup fixture.\n * @private\n */\nFixture.prototype._reset = function() {\n  var body = this.getBody();\n  var broadPhase = body.m_world.m_broadPhase;\n  this.destroyProxies(broadPhase);\n  if (this.m_shape._reset) {\n    this.m_shape._reset();\n  }\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n  this.createProxies(broadPhase, body.m_xf);\n  body.resetMassData();\n};\n\nFixture.prototype._serialize = function() {\n  return {\n    friction: this.m_friction,\n    restitution: this.m_restitution,\n    density: this.m_density,\n    isSensor: this.m_isSensor,\n\n    filterGroupIndex: this.m_filterGroupIndex,\n    filterCategoryBits: this.m_filterCategoryBits,\n    filterMaskBits: this.m_filterMaskBits,\n\n    shape: this.m_shape,\n  };\n};\n\nFixture._deserialize = function(data, body, restore) {\n  var shape = restore(Shape, data.shape);\n  var fixture = shape && new Fixture(body, shape, data);\n  return fixture;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Serializer = require('./serializer');\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep = require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","var World = require('../World');\nvar Body = require('../Body');\nvar Joint = require('../Joint');\nvar Shape = require('../Shape');\n\nvar SID = 0;\n\nvar CLASSES = {\n  'Body': Body,\n  'Joint': Joint,\n};\n\nexports.toJson = function(world, stringify) {\n  stringify = stringify || JSON.stringify;\n  var flat = [];\n  var queue = [world];\n  var map = {};\n\n  var store = function(value, cls) {\n    value.__sid = value.__sid || ++SID;\n    if (map[value.__sid]) {\n      return map[value.__sid];\n    }\n    queue.push(value);\n    var index = flat.length + queue.length;\n    var ref = {\n      'refIndex': index,\n      'refType': cls\n    };\n    return map[value.__sid] = ref;\n  };\n\n  while (queue.length) {\n    var obj = queue.shift();\n    var str = stringify(obj, function(key, value) {\n      if (typeof value === 'object' && value !== null) {\n        if (typeof value._serialize === 'function') {\n          if (value !== obj && value instanceof Body) {\n            value = store(value, 'Body');\n          } else if (value !== obj && value instanceof Joint) {\n            value = store(value, 'Joint');\n          } else {\n            value = value._serialize();\n          }\n        }\n      }\n      return value;\n    }, '  ');\n    flat.push(str);\n  }\n\n  var result = '[' + flat.join(',') + ']';\n  return result;\n};\n\nexports.fromJson = function(string, parse) {\n  parse = parse || JSON.parse;\n  var dump = parse(string);\n  var map = {};\n  function restore(cls, ref, ctx) {\n    if (!ref.refIndex) {\n      return cls && cls._deserialize && cls._deserialize(ref, ctx, restore);\n    }\n    var index = ref.refIndex;\n    cls = CLASSES[ref.refType] || cls;\n    if (map[index]) {\n      return map[index];\n    }\n    var data = dump[index];\n    return map[index] = cls._deserialize(data, ctx, restore);\n  }\n  var world = World._deserialize(dump[0], null, restore);\n  return world;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree to keep track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\nvar Body = require('../Body');\n\nDistanceJoint.TYPE = 'distance-joint';\nJoint.TYPES[DistanceJoint.TYPE] = DistanceJoint;\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\nDistanceJoint.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n    bodyA: this.m_bodyA,\n    bodyB: this.m_bodyB,\n    collideConnected: this.m_collideConnected,\n\n    frequencyHz: this.m_frequencyHz,\n    dampingRatio: this.m_dampingRatio,\n\n    localAnchorA: this.m_localAnchorA,\n    localAnchorB: this.m_localAnchorB,\n    length: this.m_length,\n\n    impulse: this.m_impulse,\n    gamma: this.m_gamma,\n    bias: this.m_bias,\n  };\n};\n\nDistanceJoint._deserialize = function(data, world, restore) {\n  data.bodyA = restore(Body, data.bodyA, world);\n  data.bodyB = restore(Body, data.bodyB, world);\n  var joint = new DistanceJoint(data);\n  return joint;\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.scaleY = -1;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, testbed.scaleY, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: testbed.scaleY * point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: testbed.scaleY * point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: testbed.scaleY * point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: testbed.scaleY * point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.scaleY = opts.scaleY || -1;\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var options = this._options;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          options.fillStyle = b.render.fill;\n        } else {\n          options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, options.scaleY * p.y);\n          f.ui.rotate(options.scaleY * r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = options.scaleY * (a.y + b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = options.scaleY * (a.y - b.y);\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, options.scaleY * shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(options.scaleY * v1.y, options.scaleY * v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(options.scaleY * Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, options.scaleY * v.y);\n    maxY = Math.max(maxY, options.scaleY * v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = options.scaleY * v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, options.scaleY * v.y);\n    maxY = Math.max(maxY, options.scaleY * v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = options.scaleY * v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}