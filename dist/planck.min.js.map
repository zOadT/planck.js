{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./lib/World.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./lib/index.js","webpack://planck/./lib/serializer/index.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_ASSERT","Vec2","common","Math","x","y","this","assert","_serialize","_deserialize","data","obj","zero","neo","clone","v","toString","JSON","stringify","isValid","isFinite","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","EPSILON","invLength","sqrt","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","max","lower","min","clamp","lengthSqr","invSqrt","scaleFn","translateFn","native","math","isNaN","nextPowerOfTwo","isPowerOfTwo","mod","num","random","debug","statement","err","log","Rot","angle","setAngle","setIdentity","rot","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Vec3","z","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","TYPES","context","restore","clazz","type","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Position","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Shape","m_radius","_reset","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","WorldManifold","separations","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","dist","nullState","Body","options","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","allowSleep","awake","active","world","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_xf","m_force","m_torque","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_jointList","m_fixtureList","m_destroyed","MassData","mass","center","I","fixtures","push","body","forEach","fixture","_addFixture","isWorldLocked","isLocked","getWorld","getFixtureList","getJointList","getContactList","isStatic","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","synchronizeFixtures","ce","ce0","destroyContact","broadPhase","m_broadPhase","proxyCount","m_proxyCount","touchProxy","m_proxies","proxyId","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","isAwake","setActive","createProxies","destroyProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","shouldCollide","jn","m_newFixture","createFixture","fixdef","destroyFixture","found","node","edge","publish","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","PolygonShape","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","_set","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","i1","i2","vs","count","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","pLocal","numerator","denominator","minX","minY","maxX","maxY","D","ex1","ey1","ex2","ey2","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","stats","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","radius","rr","sigma","EdgeShape","v1","v2","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","vertex1","vertex2","vertex0","vertex3","hasVertex0","hasVertex3","setPrev","setNext","v3","v0","newline","string","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","m_isLoop","_createLoop","_createChain","isLoop","prevVertex","nextVertex","hasPrevVertex","hasNextVertex","map","_setPrevVertex","_setNextVertex","createChain","getChildEdge","World","BroadPhase","Solver","WorldDef","gravity","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_contactCount","m_bodyList","m_bodyCount","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","bodies","joints","getBodyList","reverse","_addBody","createJoint","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","queryAABB","queryCallback","query","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","createBody","createDynamicBody","createKinematicBody","destroyBody","je","je0","destroyJoint","f0","s_step","TimeStep","timeStep","findNewContacts","reset","updateContacts","solveWorld","solveWorldTOI","updatePairs","next_c","activeA","activeB","proxyIdA","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Pool","TreeNode","parent","child1","child2","height","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","createProxy","insertLeaf","destroyProxy","removeLeaf","moveProxy","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stack","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","h","Iterator","iterator","close","parents","states","root","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","xf1","xf2","aabb1","aabb2","displacement","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","timer","Timer","now","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","time","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","internal","Serializer","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","SID","CLASSES","toJson","flat","queue","store","cls","__sid","ref","refIndex","refType","shift","str","join","fromJson","parse","dump","ctx","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","opts","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","size","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","ContactImpulse","normalImpulses","tangentImpulses","minContact","minAlpha","collideA","collideB","backup1","backup2","backup","solveIslandTOI","subStep","Date","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","normals","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","gamma","bias","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy"],"mappings":"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","file":"planck.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.prototype._serialize = function() {\n  return {\n    x: this.x,\n    y: this.y\n  };\n};\n\nVec2._deserialize = function(data) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = data.x;\n  obj.y = data.y;\n  return obj;\n};\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.x) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.prototype._serialize = function() {\n  return {\n    x: this.x,\n    y: this.y,\n    z: this.z\n  };\n};\n\nVec3._deserialize = function(data) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = data.x;\n  obj.y = data.y;\n  obj.z = data.z;\n  return obj;\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\nJoint.TYPES = {};\n\nJoint._deserialize = function(data, context, restore) {\n  var clazz = Joint.TYPES[data.type];\n  return clazz && restore(clazz, data);\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.prototype._reset = function() {\n};\n\nShape.prototype._serialize = function() {\n  return {};\n};\n\nShape.TYPES = {};\n\nShape._deserialize = function(data, context, restore) {\n  var clazz = Shape.TYPES[data.type];\n  return clazz && restore(clazz, data);\n};\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  } else if (typeof lower === 'object') {\n    this.upperBound.set(lower);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  b = b || this;\n\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n  return this;\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    var cA = pointA.clone().addMul(radiusA, normal);\n    var cB = pointB.clone().addMul(-radiusB, normal);\n    points[0] = Vec2.mid(cA, cB);\n    separations[0] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop angularVelocity\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {World} world\n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype._serialize = function() {\n  var fixtures = [];\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    fixtures.push(f);\n  }\n  return {\n    type: this.m_type,\n    position: this.m_xf.p,\n    angle: this.m_xf.q.getAngle(),\n    linearVelocity: this.m_linearVelocity,\n    angularVelocity: this.m_angularVelocity,\n    fixtures: fixtures,\n  };\n};\n\nBody._deserialize = function(data, world, restore) {\n  var body = new Body(world, data);\n\n  data.fixtures.forEach(function(data) {\n    var fixture = restore(Fixture, data, body);\n    body._addFixture(fixture);\n  });\n\n  return body;\n};\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nBody.prototype._addFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. This will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n  this._addFixture(fixture);\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\nShape.TYPES[PolygonShape.TYPE] = PolygonShape;\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertices: this.m_vertices,\n  };\n};\n\nPolygonShape._deserialize = function(data) {\n  var shape = new PolygonShape(data.vertices);\n  return shape;\n};\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\nPolygonShape.prototype._reset = function() {\n  this._set(this.m_vertices)\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n *\n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  // Copy vertices.\n  for (var i = 0; i < m; ++i) {\n    this.m_vertices[i] = ps[hull[i]];\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    // Transform vertices and normals.\n    for (var i = 0; i < this.m_count; ++i) {\n      this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n    }\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  // Put the ray into the polygon's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var lower = 0.0;\n  var upper = input.maxFraction;\n\n  var index = -1;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    var numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n    var denominator = Vec2.dot(this.m_normals[i], d);\n\n    if (denominator == 0.0) {\n      if (numerator < 0.0) {\n        return false;\n      }\n    } else {\n      // Note: we want this predicate without division:\n      // lower < numerator / denominator, where denominator < 0\n      // Since denominator < 0, we have to flip the inequality:\n      // lower < numerator / denominator <==> denominator * lower > numerator.\n      if (denominator < 0.0 && numerator < lower * denominator) {\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = numerator / denominator;\n        index = i;\n      } else if (denominator > 0.0 && numerator < upper * denominator) {\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = numerator / denominator;\n      }\n    }\n\n    // The use of epsilon here causes the assert on lower to trip\n    // in some cases. Apparently the use of epsilon was to make edge\n    // shapes work, but now those are handled separately.\n    // if (upper < lower - Math.EPSILON)\n    if (upper < lower) {\n      return false;\n    }\n  }\n\n  _ASSERT && common.assert(0.0 <= lower && lower <= input.maxFraction);\n\n  if (index >= 0) {\n    output.fraction = lower;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\nShape.TYPES[CircleShape.TYPE] = CircleShape;\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    p: this.m_p,\n    radius: this.m_radius,\n  };\n};\n\nCircleShape._deserialize = function(data) {\n  return new CircleShape(data.p, data.radius);\n};\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\nShape.TYPES[EdgeShape.TYPE] = EdgeShape;\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertex1: this.m_vertex1,\n    vertex2: this.m_vertex2,\n\n    vertex0: this.m_vertex0,\n    vertex3: this.m_vertex3,\n    hasVertex0: this.m_hasVertex0,\n    hasVertex3: this.m_hasVertex3,\n  };\n};\n\nEdgeShape._deserialize = function(data) {\n  var shape = new EdgeShape(data.vertex1, data.vertex2);\n  if (shape.hasVertex0) {\n    shape.setPrev(data.vertex0);\n  }\n  if (shape.hasVertex3) {\n    shape.setNext(data.vertex3);\n  }\n  return shape;\n};\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\nShape.TYPES[ChainShape.TYPE] = ChainShape;\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  this.m_isLoop = loop;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\nChainShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertices: this.m_vertices,\n    isLoop: this.m_isLoop,\n    prevVertex: this.m_prevVertex,\n    nextVertex: this.m_nextVertex,\n    hasPrevVertex: this.m_hasPrevVertex,\n    hasNextVertex: this.m_hasNextVertex,\n  };\n};\n\nChainShape._deserialize = function(data) {\n  var shape = new ChainShape(data.vertices.map(Vec2._deserialize), data.isLoop);\n  return shape;\n};\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Joint = require('./Joint');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\nWorld.prototype._serialize = function() {\n  var bodies = [];\n  var joints = [];\n\n  for (var b = this.getBodyList(); b; b = b.getNext()) {\n    bodies.push(b);\n  }\n\n  for (var j = this.getJointList(); j; j = j.getNext()) {\n    if (typeof j._serialize === 'function') {\n      joints.push(j);\n    }\n  }\n\n  return {\n    gravity: this.m_gravity,\n    bodies: bodies,\n    joints: joints,\n  };\n};\n\nWorld._deserialize = function(data, context, restore) {\n  if (!data) {\n    return new World();\n  }\n\n  var world = new World(data.gravity);\n\n  data.bodies && data.bodies.reverse().forEach(function(data) {\n    world._addBody(restore(Body, data, world));\n  });\n\n  data.joints && data.joints.reverse().forEach(function(data) {\n    world.createJoint(restore(Joint, data, world));\n  });\n\n  return world;\n};\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} body\n */\nWorld.prototype._addBody = function(body) {\n  _ASSERT && common.assert(this.isLocked() === false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  this._addBody(body);\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext()\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\nvar Shape = require('./Shape');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Body} body\n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\n/**\n * Re-setup fixture.\n * @private\n */\nFixture.prototype._reset = function() {\n  var body = this.getBody();\n  var broadPhase = body.m_world.m_broadPhase;\n  this.destroyProxies(broadPhase);\n  if (this.m_shape._reset) {\n    this.m_shape._reset();\n  }\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n  this.createProxies(broadPhase, body.m_xf);\n  body.resetMassData();\n};\n\nFixture.prototype._serialize = function() {\n  return {\n    friction: this.m_friction,\n    restitution: this.m_restitution,\n    density: this.m_density,\n    isSensor: this.m_isSensor,\n\n    filterGroupIndex: this.m_filterGroupIndex,\n    filterCategoryBits: this.m_filterCategoryBits,\n    filterMaskBits: this.m_filterMaskBits,\n\n    shape: this.m_shape,\n  };\n};\n\nFixture._deserialize = function(data, body, restore) {\n  var shape = restore(Shape, data.shape);\n  var fixture = shape && new Fixture(body, shape, data);\n  return fixture;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","exports.internal = {};\n\nexports.Serializer = require('./serializer');\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep = require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","var World = require('../World');\nvar Body = require('../Body');\nvar Joint = require('../Joint');\nvar Shape = require('../Shape');\n\nvar SID = 0;\n\nvar CLASSES = {\n  'Body': Body,\n  'Joint': Joint,\n};\n\nexports.toJson = function(world, stringify) {\n  stringify = stringify || JSON.stringify;\n  var flat = [];\n  var queue = [world];\n  var map = {};\n\n  var store = function(value, cls) {\n    value.__sid = value.__sid || ++SID;\n    if (map[value.__sid]) {\n      return map[value.__sid];\n    }\n    queue.push(value);\n    var index = flat.length + queue.length;\n    var ref = {\n      'refIndex': index,\n      'refType': cls\n    };\n    return map[value.__sid] = ref;\n  };\n\n  while (queue.length) {\n    var obj = queue.shift();\n    var str = stringify(obj, function(key, value) {\n      if (typeof value === 'object' && value !== null) {\n        if (typeof value._serialize === 'function') {\n          if (value !== obj && value instanceof Body) {\n            value = store(value, 'Body');\n          } else if (value !== obj && value instanceof Joint) {\n            value = store(value, 'Joint');\n          } else {\n            value = value._serialize();\n          }\n        }\n      }\n      return value;\n    }, '  ');\n    flat.push(str);\n  }\n\n  var result = '[' + flat.join(',') + ']';\n  return result;\n};\n\nexports.fromJson = function(string, parse) {\n  parse = parse || JSON.parse;\n  var dump = parse(string);\n  var map = {};\n  function restore(cls, ref, ctx) {\n    if (!ref.refIndex) {\n      return cls && cls._deserialize && cls._deserialize(ref, ctx, restore);\n    }\n    var index = ref.refIndex;\n    cls = CLASSES[ref.refType] || cls;\n    if (map[index]) {\n      return map[index];\n    }\n    var data = dump[index];\n    return map[index] = cls._deserialize(data, ctx, restore);\n  }\n  var world = World._deserialize(dump[0], null, restore);\n  return world;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree to keep track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\nvar Body = require('../Body');\n\nDistanceJoint.TYPE = 'distance-joint';\nJoint.TYPES[DistanceJoint.TYPE] = DistanceJoint;\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\nDistanceJoint.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n    bodyA: this.m_bodyA,\n    bodyB: this.m_bodyB,\n    collideConnected: this.m_collideConnected,\n\n    frequencyHz: this.m_frequencyHz,\n    dampingRatio: this.m_dampingRatio,\n\n    localAnchorA: this.m_localAnchorA,\n    localAnchorB: this.m_localAnchorB,\n    length: this.m_length,\n\n    impulse: this.m_impulse,\n    gamma: this.m_gamma,\n    bias: this.m_bias,\n  };\n};\n\nDistanceJoint._deserialize = function(data, world, restore) {\n  data.bodyA = restore(Body, data.bodyA, world);\n  data.bodyB = restore(Body, data.bodyB, world);\n  var joint = new DistanceJoint(data);\n  return joint;\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n"],"sourceRoot":""}